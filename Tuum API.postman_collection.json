{
	"info": {
		"_postman_id": "7316171f-10cf-434e-95a4-6c17003023cd",
		"name": "Tuum API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27208227"
	},
	"item": [
		{
			"name": "Authentication API",
			"item": [
				{
					"name": "Authorise Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\");",
									"    pm.expect(jsonData.errors).to.be.null; // Check that \"errors\" doesn't exists",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// Checking if \"token\" is present in the response",
									"if (jsonData.data && jsonData.data.token) {",
									"    // Setting the token as a variable for the TUUM collection",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);",
									"    ",
									"    console.log(\"Token: \" + jsonData.data.token);",
									"} else {",
									"    console.log(\"Token not found\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"modular.system\",\n    \"password\": \"pass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authUrl}}/api/v1/employees/authorise",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees",
								"authorise"
							]
						},
						"description": "### Employee Authorization\n\nThis endpoint allows you to authorize an employee by sending a POST request to `{{authUrl}}/api/v1/employees/authorise`.\n\n#### Request Body\n\n- `username` (string): The username of the employee.\n    \n- `password` (string): The password of the employee.\n    \n\n#### Response\n\nThe response will include the authorization status and any relevant employee information."
					},
					"response": []
				},
				{
					"name": "Authorise Employee Empty Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Check if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.unauthorised\"]); // Check if 'errors' has the correct value",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// Checking if \"token\" is present in the response",
									"if (jsonData.data && jsonData.data.token) {",
									"    // Setting the token as a variable for the TUUM collection",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);",
									"    ",
									"    console.log(\"Token: \" + jsonData.data.token);",
									"} else {",
									"    console.log(\"Token not found\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authUrl}}/api/v1/employees/authorise",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees",
								"authorise"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorise Employee Wrong Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Check if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.unauthorised\"]); // Check if 'errors' has the correct value",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// Checking if \"token\" is present in the response",
									"if (jsonData.data && jsonData.data.token) {",
									"    // Setting the token as a variable for the TUUM collection",
									"    pm.collectionVariables.set(\"token\", jsonData.data.token);",
									"    ",
									"    console.log(\"Token: \" + jsonData.data.token);",
									"} else {",
									"    console.log(\"Token not found\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"modular.system\",\n    \"password\": \"123123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authUrl}}/api/v1/employees/authorise",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"api",
								"v1",
								"employees",
								"authorise"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Person API",
			"item": [
				{
					"name": "Create Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Check that \"errors\" doesn't exists",
									"    pm.expect(jsonData.errors).to.be.null;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// Checking if \"personId\" is present in the response",
									"if (jsonData.data && jsonData.data.personId) {",
									"    // Setting the personId as a variable for the TUUM collection",
									"    pm.collectionVariables.set(\"personId\", jsonData.data.personId);",
									"    ",
									"    console.log(\"Person ID: \" + jsonData.data.personId);",
									"} else {",
									"    console.log(\"Person creation unsuccessful\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \t\"personTypeCode\":\"P\",\n   \t\"identificationNumber\":{\n          \t\"primary\":true,\n          \t\"idNumber\":\"97958238226357442\",\n          \t\"idCountryCode\":\"EE\"\n   \t},\n   \t\"addresses\":[\n          \t{\n                  \t\"addressTypeCode\":\"R\",\n                  \t\"countryCode\":\"EE\",\n                  \t\"cityCounty\":\"Tartu\",\n                  \t\"street1\":\"Address 919\"\n          \t}\n   \t],\n   \t\"givenName\":\"Testing\",\n   \t\"surname\":\"Assignment\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{personUrl}}/api/v2/persons",
							"host": [
								"{{personUrl}}"
							],
							"path": [
								"api",
								"v2",
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Person Invalid personTypeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400); // Check if the status is 400",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.personTypeInvalid\"]); // Checking if 'errors' has the correct value",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \t\"personTypeCode\":\"X\",\n   \t\"identificationNumber\":{\n          \t\"primary\":true,\n          \t\"idNumber\":\"ID-1212121212\",\n          \t\"idCountryCode\":\"EE\"\n   \t},\n   \t\"addresses\":[\n          \t{\n                  \t\"addressTypeCode\":\"R\",\n                  \t\"countryCode\":\"EE\",\n                  \t\"cityCounty\":\"Tartu\",\n                  \t\"street1\":\"Address 919\"\n          \t}\n   \t],\n   \t\"givenName\":\"Testing\",\n   \t\"surname\":\"Assignment\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{personUrl}}/api/v2/persons",
							"host": [
								"{{personUrl}}"
							],
							"path": [
								"api",
								"v2",
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Person Empty personTypeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.have.status(500); // Check if the status is 500",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.technical\"]); // Checking if 'errors' has the correct value",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \t\"personTypeCode\":\"\",\n   \t\"identificationNumber\":{\n          \t\"primary\":true,\n          \t\"idNumber\":\"ID-1212121212\",\n          \t\"idCountryCode\":\"EE\"\n   \t},\n   \t\"addresses\":[\n          \t{\n                  \t\"addressTypeCode\":\"R\",\n                  \t\"countryCode\":\"EE\",\n                  \t\"cityCounty\":\"Tartu\",\n                  \t\"street1\":\"Address 919\"\n          \t}\n   \t],\n   \t\"givenName\":\"Testing\",\n   \t\"surname\":\"Assignment\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{personUrl}}/api/v2/persons",
							"host": [
								"{{personUrl}}"
							],
							"path": [
								"api",
								"v2",
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Person No Authentication Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401); // Check if the status is 401",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \t\"personTypeCode\":\"P\",\n   \t\"identificationNumber\":{\n          \t\"primary\":true,\n          \t\"idNumber\":\"123123123\",\n          \t\"idCountryCode\":\"EE\"\n   \t},\n   \t\"addresses\":[\n          \t{\n                  \t\"addressTypeCode\":\"R\",\n                  \t\"countryCode\":\"EE\",\n                  \t\"cityCounty\":\"Tartu\",\n                  \t\"street1\":\"Address 919\"\n          \t}\n   \t],\n   \t\"givenName\":\"Testing\",\n   \t\"surname\":\"Assignment\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{personUrl}}/api/v2/persons",
							"host": [
								"{{personUrl}}"
							],
							"path": [
								"api",
								"v2",
								"persons"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account API (Create Account)",
			"item": [
				{
					"name": "Create Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" doesn't exists",
									"    pm.expect(jsonData.errors).to.be.null;",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// Checking if \"token\" is present in the response",
									"if (jsonData.data && jsonData.data.accountId) {",
									"    // Set the token as a variable",
									"    pm.collectionVariables.set(\"accountId\", jsonData.data.accountId);",
									"    ",
									"    console.log(\"Person ID: \" + jsonData.data.accountId);",
									"} else {",
									"    console.log(\"Person creation unsuccessful\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountTypeCode\": \"CURRENCY\",\n  \"personName\": \"Mike Test Tuum\",\n  \"customerGroupCode\": \"GROUP_A\",\n  \"priceListTypeCode\": \"STANDARD\",\n  \"residencyCountryCode\": \"EE\",\n  \"currencyCode\": \"EUR\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{accountUrl}}/api/v4/persons/:personId/accounts",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v4",
								"persons",
								":personId",
								"accounts"
							],
							"variable": [
								{
									"key": "personId",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account Without accountTypeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.validationErrors\"]); // Checking if 'errors' has the correct value",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"// Checking if \"token\" is present in the response",
									"if (jsonData.data && jsonData.data.accountId) {",
									"    // Set the token as a variable",
									"    pm.collectionVariables.set(\"accountId\", jsonData.data.accountId);",
									"    ",
									"    console.log(\"Person ID: \" + jsonData.data.accountId);",
									"} else {",
									"    console.log(\"Person creation unsuccessful\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountTypeCode\": \"\",\n  \"personName\": \"Mike Test Tuum\",\n  \"customerGroupCode\": \"GROUP_A\",\n  \"priceListTypeCode\": \"STANDARD\",\n  \"residencyCountryCode\": \"EE\",\n  \"currencyCode\": \"EUR\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{accountUrl}}/api/v4/persons/:personId/accounts",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v4",
								"persons",
								":personId",
								"accounts"
							],
							"variable": [
								{
									"key": "personId",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account Without Account Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.validationErrors\"]); // Checking if 'errors' has the correct value",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"accountTypeCode\": \"CURRENCY\",\n  \"masterAccountId\": \"ID-909099\",\n  \"accountName\": \"My testing account\",\n  \"personName\": \"Test Testing\",\n  \"source\": {\n    \"sourceName\": \"string\",\n    \"sourceRef\": \"string\"\n  },\n  \"residencyCountryCode\": \"EE\",\n  \"customerGroupCode\": \"TEST\",\n  \"priceListTypeCode\": \"DNB\",\n  \"currencyCode\": \"EUR\",\n  \"accountInterestRate\": 10,\n  \"personTypeCode\": \"P\",\n  \"intraOrgCode\": \"string\",\n  \"representatives\": [\n    {\n      \"personId\": \"ID-123\",\n      \"accountRightCode\": \"ALL\"\n    }\n  ],\n  \"accountTypeSetupCode\": \"EXTERNAL_VIRTUAL\",\n  \"serviceProviderCode\": \"TUUM\",\n  \"accountNumbers\": [\n    {\n      \"accountNumber\": {\n        \"value\": \"\",\n        \"type\": \"IBAN\"\n      },\n      \"countryCode\": \"EE\",\n      \"financialInstitutionId\": {\n        \"value\": \"MAINDE2XXXX\",\n        \"type\": \"BIC\"\n      },\n      \"defaultCurrencyCode\": \"EUR\"\n    }\n  ],\n  \"limits\": [\n    {\n      \"amount\": {\n        \"amount\": 1,\n        \"currencyCode\": \"EUR\"\n      },\n      \"accountLimitTypeCode\": \"DAILY\"\n    },\n    {\n      \"amount\": {\n        \"amount\": 10,\n        \"currencyCode\": \"EUR\"\n      },\n      \"accountLimitTypeCode\": \"MONTHLY\"\n    }\n  ],\n  \"interestMethodAssignmentCode\": \"EXTRA15\",\n  \"accountClassCode\": \"SAFEGUARDED\",\n  \"taxResidencyCountryCode\": \"DE\",\n  \"jurisdictionCountryCode\": \"ES\",\n  \"accessRestricted\": \"false\",\n  \"numberingSequenceKey\": \"PERSON_DDA_ACCOUNT\",\n  \"bicKey\": \"RETAIL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{accountUrl}}/api/v4/persons/:personId/accounts",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v4",
								"persons",
								":personId",
								"accounts"
							],
							"variable": [
								{
									"key": "personId",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account API (Find Info)",
			"item": [
				{
					"name": "Get Person Information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v1/persons/:personId",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v1",
								"persons",
								":personId"
							],
							"variable": [
								{
									"key": "personId",
									"value": "{{personId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Customer Group Codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v1/accounts/customer-group-codes",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								"customer-group-codes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Price Lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v2/price-lists",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v2",
								"price-lists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account API (Account Balance)",
			"item": [
				{
					"name": "Find Account Balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v1/accounts/:accountId/balances?currencyCode=EUR",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v1",
								"accounts",
								":accountId",
								"balances"
							],
							"query": [
								{
									"key": "currencyCode",
									"value": "EUR"
								}
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{accountId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account API (Transactions)",
			"item": [
				{
					"name": "Find Fee Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v1/fee-configuration/fee-types",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v1",
								"fee-configuration",
								"fee-types"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find transaction type fee types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v1/fee-configuration/fee-types/by-fee-transaction-type/:transactionTypeCode\n",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v1",
								"fee-configuration",
								"fee-types",
								"by-fee-transaction-type",
								":transactionTypeCode\n"
							],
							"variable": [
								{
									"key": "transactionTypeCode\n",
									"value": "ACC2SEPA_PAY"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Find Account Transaction Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v1/transactions/types/all",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions",
								"types",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account Transaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionTypeCode\": \"ACC_ADM_FEE_R\",\n  \"transactionSubtypeCode\": \"\",\n  \"money\": {\n    \"amount\": 9.12,\n    \"currencyCode\": \"EUR\"\n  },\n  \"valueDate\": \"2024-09-12\",\n  \"details\": \"Account maintenance fee reversal\",\n  \"referenceNumber\": \"CT20230608\",\n  \"source\": {\n    \"sourceName\": \"123\",\n    \"sourceRef\": \"123456\"\n  },\n  \"contractSource\": {\n    \"sourceName\": \"string\",\n    \"sourceRef\": \"string\",\n    \"contractNumber\": \"string\"\n  },\n  \"counterparty\": {\n    \"name\": \"Test Assingment\",\n    \"accountNumber\": {\n      \"value\": \"DE89370400440532013000\",\n      \"type\": \"IBAN\"\n    },\n    \"accountNumberCountryCode\": \"EE\",\n    \"financialInstitutionId\": {\n      \"value\": \"MAINDE2XXXX\",\n      \"type\": \"BIC\"\n    }\n  },\n  \"paymentServiceProviderCode\": \"TUUM\",\n  \"fees\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{accountUrl}}/api/v5/accounts/:accountId/transactions",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v5",
								"accounts",
								":accountId",
								"transactions"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{accountId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Account Transaction Value Date Before Account Activation Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response contains the expected error field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Check if 'errors' exists",
									"    pm.expect(jsonData.errors).to.eql([\"err.valueDateBeforeAccountActivationDate\"]); // Check if 'errors' has the correct value",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transactionTypeCode\": \"ACC_ADM_FEE_R\",\n  \"transactionSubtypeCode\": \"\",\n  \"money\": {\n    \"amount\": 9.12,\n    \"currencyCode\": \"EUR\"\n  },\n  \"valueDate\": \"2024-09-10\",\n  \"details\": \"Account maintenance fee reversal\",\n  \"referenceNumber\": \"CT20230608\",\n  \"source\": {\n    \"sourceName\": \"123\",\n    \"sourceRef\": \"123456\"\n  },\n  \"contractSource\": {\n    \"sourceName\": \"string\",\n    \"sourceRef\": \"string\",\n    \"contractNumber\": \"string\"\n  },\n  \"counterparty\": {\n    \"name\": \"Test Assingment\",\n    \"accountNumber\": {\n      \"value\": \"DE89370400440532013000\",\n      \"type\": \"IBAN\"\n    },\n    \"accountNumberCountryCode\": \"EE\",\n    \"financialInstitutionId\": {\n      \"value\": \"MAINDE2XXXX\",\n      \"type\": \"BIC\"\n    }\n  },\n  \"paymentServiceProviderCode\": \"TUUM\",\n  \"fees\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{accountUrl}}/api/v5/accounts/:accountId/transactions",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v5",
								"accounts",
								":accountId",
								"transactions"
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{accountId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account API (Search Transactions)",
			"item": [
				{
					"name": "Find account transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Json response should not have any errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\"); // Checking that \"errors\" exists",
									"    pm.expect(jsonData.errors).to.be.null; // Checking that \"errors\" is null",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-tenant-code",
								"value": "MB",
								"type": "text"
							},
							{
								"key": "x-channel-code",
								"value": "SYSTEM",
								"type": "text"
							},
							{
								"key": "Accept-Language",
								"value": "en",
								"type": "text"
							},
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{accountUrl}}/api/v4/accounts/:accountId/transactions/search?dateFrom=2024-09-01&dateTo=2024-10-31&dateType=POSTING_DATE&pageNumber=1&pageSize=10",
							"host": [
								"{{accountUrl}}"
							],
							"path": [
								"api",
								"v4",
								"accounts",
								":accountId",
								"transactions",
								"search"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "2024-09-01"
								},
								{
									"key": "dateTo",
									"value": "2024-10-31"
								},
								{
									"key": "dateType",
									"value": "POSTING_DATE"
								},
								{
									"key": "pageNumber",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								}
							],
							"variable": [
								{
									"key": "accountId",
									"value": "{{accountId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authUrl",
			"value": "https://auth-api.sandbox.tuumplatform.com",
			"type": "string"
		},
		{
			"key": "personUrl",
			"value": "https://person-api.sandbox.tuumplatform.com",
			"type": "string"
		},
		{
			"key": "accountUrl",
			"value": "https://account-api.sandbox.tuumplatform.com",
			"type": "string"
		}
	]
}